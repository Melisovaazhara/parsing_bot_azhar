from telegram import Update
from telegram.ext import ContextTypes
from bot.keyboards.reply import get_main_keyboard
from bot.keyboards.inline import get_article_keyboard
import html
import logging

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

ü§ñ –Ø –±–æ—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è IT —Å—Ç–∞—Ç–µ–π —Å itproger.com/news

üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/news - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
/next - –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
/prev - –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

üéõÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!
    """
    await update.message.reply_text(
        welcome_text,
        reply_markup=get_main_keyboard()
    )

async def show_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    bot = context.bot_data['bot']
    bot.user_data[user_id] = {'current_page': 1}

    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id, 
        action='typing'
    )
    await _send_articles(update, context, page=1)

async def next_page(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    bot = context.bot_data['bot']
    
    if user_id not in bot.user_data:
        bot.user_data[user_id] = {'current_page': 1}
    
    current_page = bot.user_data[user_id]['current_page']
    next_page = current_page + 1

    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id, 
        action='typing'
    )
    await _send_articles(update, context, page=next_page)

async def prev_page(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    bot = context.bot_data['bot']
    
    if user_id not in bot.user_data:
        bot.user_data[user_id] = {'current_page': 1}
    
    current_page = bot.user_data[user_id]['current_page']
    prev_page = max(1, current_page - 1)

    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id, 
        action='typing'
    )
    await _send_articles(update, context, page=prev_page)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤—ã–≤–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
/news - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
/next - –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—Ç–∞—Ç–µ–π.
/prev - –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—Ç–∞—Ç–µ–π.
/help - –í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞.

üéõÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ —Å—Ç–∞—Ç–µ–π.
    """
    await update.message.reply_text(help_text)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏":
        await show_news(update, context)
    elif text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞":
        await next_page(update, context)
    elif text == "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞":
        await prev_page(update, context)
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(update, context)
    else:
        await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é.")

async def _send_articles(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int):
    bot = context.bot_data['bot']
    user_id = update.effective_user.id
    bot.user_data[user_id] = {'current_page': page}

    articles = bot.parser.get_articles(page)

    if not articles:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    cache_key = f"{user_id}_{page}"
    bot.article_cache[cache_key] = articles

    for i, article in enumerate(articles, 1):
        message_text = _format_article_message(article, i, page)
        article_hash = bot._get_short_hash(article['link'])
        bot.article_cache[article_hash] = article['link']

        is_last = (i == len(articles))
        reply_markup = get_article_keyboard(article_hash, article['link'], page, is_last)

        try:
            if article.get('image_url') and article['image_url'].startswith('http'):
                await update.message.reply_photo(
                    photo=article['image_url'],
                    caption=message_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(
                    message_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—å–∏: {e}")
            await update.message.reply_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

def _format_article_message(article, index, page):
    title = html.escape(article['title'])
    description = html.escape(article['description'])

    return f"""
üì∞ <b>{title}</b>

üìù {description}

üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page} | –°—Ç–∞—Ç—å—è: {index}
    """
