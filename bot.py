import requests
from bs4 import BeautifulSoup
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import html
import hashlib
import logging
from urllib.parse import urljoin

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8400111810:AAEm3p2S71750rYde1ydxwG6AfkYU0QLhfs"


class ITProgerParser:
    def __init__(self):
        self.base_url = "https://itproger.com/news"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })

    def get_articles(self, page=1):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç–∞—Ç—å–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            if page == 1:
                url = self.base_url
            else:
                url = f"{self.base_url}/page-{page}"

            logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {url}")
            response = self.session.get(url, timeout=10)
            response.raise_for_status()

            soup = BeautifulSoup(response.content, 'html.parser')
            articles = []

            # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å–æ —Å—Ç–∞—Ç—å—è–º–∏
            article_containers = soup.find_all('article', class_=lambda x: x and 'article' in x)

            if not article_containers:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
                article_containers = soup.find_all('div', class_=lambda x: x and ('article' in x or 'news' in x))

            for container in article_containers:
                try:
                    article_data = self._parse_article_container(container)
                    if article_data and article_data['title']:
                        articles.append(article_data)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å—Ç–∞—Ç—å–∏: {e}")
                    continue

            # –ï—Å–ª–∏ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç —Å—Ç–∞—Ç–µ–π, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
            if not articles and page == 1:
                articles = self._alternative_parse(soup)

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(articles)}")
            return articles[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {e}")
            return self._get_demo_articles(page)

    def _parse_article_container(self, container):
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Ç–∞—Ç—å–∏"""
        article = {}

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_elem = container.find(['h2', 'h3', 'h4', 'h1'])
        if not title_elem:
            title_elem = container.find('a', class_=lambda x: x and 'title' in x)
        article['title'] = title_elem.get_text().strip() if title_elem else "IT News Article"

        # –°—Å—ã–ª–∫–∞
        link_elem = container.find('a', href=True)
        if link_elem:
            article['link'] = urljoin(self.base_url, link_elem['href'])
        else:
            article['link'] = self.base_url

        # –û–ø–∏—Å–∞–Ω–∏–µ
        desc_elem = container.find(['p', 'div'], class_=lambda x: x and ('desc' in x or 'content' in x or 'text' in x))
        if desc_elem:
            article['description'] = desc_elem.get_text().strip()[:200] + "..."
        else:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
            first_p = container.find('p')
            article['description'] = first_p.get_text().strip()[
                                     :200] + "..." if first_p else "IT news and programming tutorials..."

        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img_elem = container.find('img', src=True)
        if img_elem:
            article['image_url'] = urljoin(self.base_url, img_elem['src'])
        else:
            article['image_url'] = ""

        return article

    def _alternative_parse(self, soup):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        articles = []

        # –ü–æ–∏—Å–∫ –ø–æ —Å—Å—ã–ª–∫–∞–º —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
        news_links = soup.find_all('a', href=lambda x: x and '/news/' in x, class_=False)

        for link in news_links[:10]:
            try:
                article = {
                    'title': link.get_text().strip() or "–ù–æ–≤–æ—Å—Ç—å ITProger",
                    'link': urljoin(self.base_url, link['href']),
                    'description': "–ß–∏—Ç–∞–π—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Å–∞–π—Ç–µ...",
                    'image_url': ""
                }
                articles.append(article)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
                continue

        return articles

    def _get_demo_articles(self, page):
        """–î–µ–º–æ —Å—Ç–∞—Ç—å–∏ –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è"""
        return [
            {
                'title': f'IT News Page {page} - Article 1',
                'description': 'Latest programming news and updates from the IT world. Learn about new technologies '
                               'and frameworks.',
                'link': 'https://itproger.com/news',
                'image_url': ''
            },
            {
                'title': f'Programming Tutorials - Page {page}',
                'description': 'Learn new programming languages and frameworks with step-by-step tutorials '
                               'and examples.',
                'link': 'https://itproger.com/news',
                'image_url': ''
            },
            {
                'title': f'Tech Updates - Page {page}',
                'description': 'Stay updated with the latest technology trends and developments in the '
                               'programming world.',
                'link': 'https://itproger.com/news',
                'image_url': ''
            }
        ]

    def get_full_content(self, article_url):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏"""
        try:
            response = self.session.get(article_url, timeout=10)
            response.raise_for_status()

            soup = BeautifulSoup(response.content, 'html.parser')

            # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏
            content_div = soup.find('div', class_=lambda x: x and ('content' in x or 'article' in x or 'post' in x))

            if content_div:
                # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (—Å–∫—Ä–∏–ø—Ç—ã, —Å—Ç–∏–ª–∏)
                for elem in content_div.find_all(['script', 'style', 'nav', 'header', 'footer']):
                    elem.decompose()

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
                text = content_div.get_text(separator='\n', strip=True)
                if text:
                    return text[:3000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                else:
                    return "‚è≥ –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üîó" \
                           " –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç—å—é' –¥–ª—è —á—Ç–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ."
            else:
                return "‚è≥ –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üîó " \
                       "–û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç—å—é' –¥–ª—è —á—Ç–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ."

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            return "‚è≥ –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üîó" \
                   " –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç—å—é' –¥–ª—è —á—Ç–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ."


class ITProgerBot:
    def __init__(self):
        self.parser = ITProgerParser()
        self.user_data = {}
        self.article_cache = {}

    def _get_short_hash(self, url):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Ö—ç—à –¥–ª—è URL"""
        return hashlib.md5(url.encode()).hexdigest()[:10]

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

ü§ñ –Ø –±–æ—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è IT —Å—Ç–∞—Ç–µ–π —Å itproger.com/news

üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/news - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
/next - –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
/prev - –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

üéõÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!
        """

        # Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        reply_keyboard = [
            ["üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"],
            ["‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"],
            ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
        ]

        await update.message.reply_text(
            welcome_text,
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard,
                resize_keyboard=True,
                input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
            )
        )

    async def show_news(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
        user_id = update.effective_user.id
        self.user_data[user_id] = {'current_page': 1}

        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action='typing'
        )
        await self._send_articles(update, context, page=1)

    async def next_page(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        user_id = update.effective_user.id

        if user_id not in self.user_data:
            self.user_data[user_id] = {'current_page': 1}

        current_page = self.user_data[user_id]['current_page']
        next_page = current_page + 1

        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action='typing'
        )
        await self._send_articles(update, context, page=next_page)

    async def prev_page(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        user_id = update.effective_user.id

        if user_id not in self.user_data:
            self.user_data[user_id] = {'current_page': 1}

        current_page = self.user_data[user_id]['current_page']
        prev_page = max(1, current_page - 1)

        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action='typing'
        )
        await self._send_articles(update, context, page=prev_page)

    async def _send_articles(self, update: Update, context: ContextTypes.DEFAULT_TYPE, page: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—å–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        user_id = update.effective_user.id
        self.user_data[user_id] = {'current_page': page}

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏
        articles = self.parser.get_articles(page)

        if not articles:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—å–∏ –≤ –∫—ç—à
        cache_key = f"{user_id}_{page}"
        self.article_cache[cache_key] = articles

        # –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 1:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_{page}"))
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"next_{page}"))

        navigation = [nav_buttons] if nav_buttons else []

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç–∞—Ç—å—é –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for i, article in enumerate(articles, 1):
            message_text = self._format_article_message(article, i, page)

            # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Å—Ç–∞—Ç—å–∏
            article_hash = self._get_short_hash(article['link'])

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—å–∏
            article_buttons = [
                [
                    InlineKeyboardButton("üìñ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç", callback_data=f"full_{article_hash}"),
                    InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç—å—é", url=article['link'])
                ]
            ]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –ø–æ —Ö—ç—à—É
            self.article_cache[article_hash] = article['link']

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞—Ç—å–µ
            if i == len(articles):
                article_buttons.extend(navigation)

            reply_markup = InlineKeyboardMarkup(article_buttons)

            try:
                if article.get('image_url') and article['image_url'].startswith('http'):
                    await update.message.reply_photo(
                        photo=article['image_url'],
                        caption=message_text,
                        reply_markup=reply_markup,
                        parse_mode='HTML'
                    )
                else:
                    await update.message.reply_text(
                        message_text,
                        reply_markup=reply_markup,
                        parse_mode='HTML'
                    )
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e} –¥–ª—è URL: {article.get('image_url', '–ù–µ—Ç URL')}")
                await update.message.reply_text(
                    message_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )

    def _format_article_message(self, article, index, page):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—å–µ–π"""
        title = html.escape(article['title'])
        description = html.escape(article['description'])

        return f"""
üì∞ <b>{title}</b>

üìù {description}

üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page} | –°—Ç–∞—Ç—å—è: {index}
        """

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        data = query.data
        user_id = query.from_user.id

        if data.startswith('full_'):
            # –ö–Ω–æ–ø–∫–∞ "–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç"
            article_hash = data[5:]
            article_url = self.article_cache.get(article_hash)

            if article_url:
                full_content = self.parser.get_full_content(article_url)

                if full_content and full_content != "–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ":
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
                    content = html.escape(full_content)
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                    if len(content) > 3000:
                        content = content[:3000] + "...\n\nüìñ <i>–ß–∏—Ç–∞–π—Ç–µ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é –Ω–∞ —Å–∞–π—Ç–µ</i>"
                    message = f"üìñ <b>–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b>\n\n{content}"
                else:
                    message = "‚è≥ <b>–°–∫–æ—Ä–æ!</b>\n\n–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."

                try:
                    await query.message.reply_text(message, parse_mode='HTML')
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")
            else:
                await query.message.reply_text("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        elif data.startswith('next_'):
            # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            current_page = int(data[5:])
            next_page = current_page + 1
            await self._handle_navigation(query, context, next_page)

        elif data.startswith('prev_'):
            # –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            current_page = int(data[5:])
            prev_page = max(1, current_page - 1)
            await self._handle_navigation(query, context, prev_page)

    async def _handle_navigation(self, query, context: ContextTypes.DEFAULT_TYPE, page: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""
        user_id = query.from_user.id
        self.user_data[user_id] = {'current_page': page}

        articles = self.parser.get_articles(page)
        if not articles:
            await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å–∏ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
            return

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏
        for i, article in enumerate(articles, 1):
            message_text = self._format_article_message(article, i, page)
            article_hash = self._get_short_hash(article['link'])

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—å–∏
            nav_buttons = []
            if page > 1:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_{page}"))
            nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"next_{page}"))

            article_buttons = [
                [
                    InlineKeyboardButton("üìñ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç", callback_data=f"full_{article_hash}"),
                    InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç—å—é", url=article['link'])
                ],
                nav_buttons
            ]

            self.article_cache[article_hash] = article['link']
            reply_markup = InlineKeyboardMarkup(article_buttons)

            try:
                if article.get('image_url') and article['image_url'].startswith('http'):
                    await context.bot.send_photo(
                        chat_id=query.message.chat_id,
                        photo=article['image_url'],
                        caption=message_text,
                        reply_markup=reply_markup,
                        parse_mode='HTML'
                    )
                else:
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text=message_text,
                        reply_markup=reply_markup,
                        parse_mode='HTML'
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—å–∏: {e}")
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=message_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤—ã–≤–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
/news - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
/next - –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—Ç–∞—Ç–µ–π.
/prev - –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—Ç–∞—Ç–µ–π.
/help - –í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞.

üéõÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ —Å—Ç–∞—Ç–µ–π.
    """
    await update.message.reply_text(help_text)


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text

    # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    bot = None
    for handler in context.application.handlers[0]:
        if hasattr(handler, 'callback') and hasattr(handler.callback, '__self__'):
            bot = handler.callback.__self__
            break

    if not bot:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if text == "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏":
        await bot.show_news(update, context)
    elif text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞":
        await bot.next_page(update, context)
    elif text == "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞":
        await bot.prev_page(update, context)
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(update, context)
    else:
        await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é.")


async def post_init(application: Application):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot = ITProgerBot()

    application = Application.builder() \
        .token(BOT_TOKEN) \
        .post_init(post_init) \
        .build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("news", bot.show_news))
    application.add_handler(CommandHandler("next", bot.next_page))
    application.add_handler(CommandHandler("prev", bot.prev_page))
    application.add_handler(CommandHandler("help", help_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(bot.button_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling()


if __name__ == '__main__':
    main()
