

import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, CommandHandler
from config import BOT_TOKEN
from parser import ITProgerParser
import html
import hashlib
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)


class ITProgerBot:
    def __init__(self):
        self.parser = ITProgerParser()
        self.user_data = {}
        self.article_cache = {}

    def _get_short_hash(self, url):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Ö—ç—à –¥–ª—è URL"""
        return hashlib.md5(url.encode()).hexdigest()[:10]

    async def start(self, update: Update, context: CommandHandler.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

ü§ñ –Ø –±–æ—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è IT —Å—Ç–∞—Ç–µ–π —Å itproger.com/news

üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/news - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
/next - –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
/prev - –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

üéõÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!
        """

        reply_keyboard = [
            ["üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"],
            ["‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"],
            ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
        ]

        await update.message.reply_text(
            welcome_text,
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard,
                resize_keyboard=True,
                input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
            )
        )

    async def show_news(self, update: Update, context: CommandHandler.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
        user_id = update.effective_user.id
        self.user_data[user_id] = {'current_page': 1}

        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action=telegram.constants.ChatAction.TYPING
        )
        await self._send_articles(update, context, page=1)

    async def next_page(self, update: Update, context: CommandHandler.DEFAULT_TYPE):
        """–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        user_id = update.effective_user.id

        if user_id not in self.user_data:
            self.user_data[user_id] = {'current_page': 1}

        current_page = self.user_data[user_id]['current_page']
        next_page = current_page + 1

        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action=telegram.constants.ChatAction.TYPING
        )
        await self._send_articles(update, context, page=next_page)

    async def prev_page(self, update: Update, context: CommandHandler.DEFAULT_TYPE):
        """–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        user_id = update.effective_user.id

        if user_id not in self.user_data:
            self.user_data[user_id] = {'current_page': 1}

        current_page = self.user_data[user_id]['current_page']
        prev_page = max(1, current_page - 1)

        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action=telegram.constants.ChatAction.TYPING
        )
        await self._send_articles(update, context, page=prev_page)

    async def _send_articles(self, update: Update, context: CommandHandler.DEFAULT_TYPE, page: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—å–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        user_id = update.effective_user.id
        self.user_data[user_id] = {'current_page': page}

        articles = self.parser.get_articles(page)

        if not articles:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

        cache_key = f"{user_id}_{page}"
        self.article_cache[cache_key] = articles

        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        nav_buttons = []
        if page > 1:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_{page}"))
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"next_{page}"))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—å–∏
        for i, article in enumerate(articles, 1):
            message_text = self._format_article_message(article, i, page)
            article_hash = self._get_short_hash(article['link'])

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—å–∏
            article_buttons = [
                [
                    InlineKeyboardButton("üìñ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç", callback_data=f"full_{article_hash}"),
                    InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç—å—é", url=article['link'])
                ]
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞—Ç—å–µ
            if i == len(articles):
                article_buttons.append(nav_buttons)

            self.article_cache[article_hash] = article['link']
            reply_markup = InlineKeyboardMarkup(article_buttons)

            try:
                if article.get('image_url') and article['image_url'].startswith('http'):
                    await update.message.reply_photo(
                        photo=article['image_url'],
                        caption=message_text,
                        reply_markup=reply_markup,
                        parse_mode='HTML'
                    )
                else:
                    await update.message.reply_text(
                        message_text,
                        reply_markup=reply_markup,
                        parse_mode='HTML'
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—å–∏: {e}")
                await update.message.reply_text(
                    message_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )

    def _format_article_message(self, article, index, page):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—å–µ–π"""
        title = html.escape(article['title'])
        description = html.escape(article['description'])

        return f"""
üì∞ <b>{title}</b>

üìù {description}

üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page} | –°—Ç–∞—Ç—å—è: {index}
        """

    async def button_handler(self, update: Update, context: CommandHandler.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        data = query.data
        user_id = query.from_user.id

        if data.startswith('full_'):
            # –ö–Ω–æ–ø–∫–∞ "–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç"
            article_hash = data[5:]
            article_url = self.article_cache.get(article_hash)

            if article_url:
                full_content = self.parser.get_full_content(article_url)

                if full_content and full_content != "–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ":
                    content = html.escape(full_content)
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if len(content) > 1000:
                        content = content[:1000] + "...\n\nüìñ <i>–ß–∏—Ç–∞–π—Ç–µ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é –Ω–∞ —Å–∞–π—Ç–µ</i>"
                    message = f"üìñ <b>–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b>\n\n{content}"
                else:
                    message = "‚è≥ <b>–°–∫–æ—Ä–æ!</b>\n\n–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."

                try:
                    await query.message.reply_text(message, parse_mode='HTML')
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")
            else:
                await query.message.reply_text("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        elif data.startswith('next_'):
            # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            current_page = int(data[5:])
            next_page = current_page + 1
            await self._handle_navigation(query, context, next_page)

        elif data.startswith('prev_'):
            # –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            current_page = int(data[5:])
            prev_page = max(1, current_page - 1)
            await self._handle_navigation(query, context, prev_page)

    async def _handle_navigation(self, query, context: CommandHandler.DEFAULT_TYPE, page: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""
        user_id = query.from_user.id
        self.user_data[user_id] = {'current_page': page}

        articles = self.parser.get_articles(page)
        if not articles:
            await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å–∏ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
            return

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏
        for i, article in enumerate(articles, 1):
            message_text = self._format_article_message(article, i, page)
            article_hash = self._get_short_hash(article['link'])

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—å–∏
            nav_buttons = []
            if page > 1:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_{page}"))
            nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"next_{page}"))

            article_buttons = [
                [
                    InlineKeyboardButton("üìñ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç", callback_data=f"full_{article_hash}"),
                    InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç—å—é", url=article['link'])
                ],
                nav_buttons
            ]

            self.article_cache[article_hash] = article['link']
            reply_markup = InlineKeyboardMarkup(article_buttons)

            try:
                if article.get('image_url') and article['image_url'].startswith('http'):
                    await context.bot.send_photo(
                        chat_id=query.message.chat_id,
                        photo=article['image_url'],
                        caption=message_text,
                        reply_markup=reply_markup,
                        parse_mode='HTML'
                    )
                else:
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text=message_text,
                        reply_markup=reply_markup,
                        parse_mode='HTML'
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—å–∏: {e}")
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=message_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )


async def help_command(update: Update, context: CommandHandler.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/news - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
/next - –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
/prev - –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
/help - –°–ø—Ä–∞–≤–∫–∞

üéõÔ∏è –ö–Ω–æ–ø–∫–∏:
üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ - –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–µ–∂–∏–µ —Å—Ç–∞—Ç—å–∏
‚û°Ô∏è/‚¨ÖÔ∏è - –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
üìñ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç - –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é –ø–æ–ª–Ω–æ—Å—Ç—å—é
üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç—å—é - –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç
    """
    await update.message.reply_text(help_text)


async def handle_text(update: Update, context: CommandHandler.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    bot = context.application.handlers[0].callback

    if text == "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏":
        await bot.show_news(update, context)
    elif text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞":
        await bot.next_page(update, context)
    elif text == "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞":
        await bot.prev_page(update, context)
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(update, context)
    else:
        await update.message.reply_text(
            "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é."
        )


async def post_init(application: Application):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot = ITProgerBot()

    application = Application.builder() \
        .token(BOT_TOKEN) \
        .post_init(post_init) \
        .build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("news", bot.show_news))
    application.add_handler(CommandHandler("next", bot.next_page))
    application.add_handler(CommandHandler("prev", bot.prev_page))
    application.add_handler(CommandHandler("help", help_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(CallbackQueryHandler(bot.button_handler))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()


if __name__ == '__main__':
    main()
